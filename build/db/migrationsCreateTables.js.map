{"version":3,"sources":["../../server/db/migrationsCreateTables.js"],"names":["dotenv","config","console","log","pool","query","password","bcrypt","hashPassword","process","env","ADMIN_PASSWORD","Admin","firstname","lastname","username","email","phonenumber","queryPlaceholder","values","makeAdmin","adminValue"],"mappings":";;AAEA;;AACA;;AACA;;;;;;;;AAEAA,gBAAOC,MAAP;;AAEAC,OAAO,CAACC,GAAR,CAAY,oBAAZ;;AAEA;AAAA;AAAA,wBAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEOD,UAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AAFP;AAAA,iBAGaC,eAAKC,KAAL,+ZAHb;;AAAA;AAcaC,UAAAA,QAdb,GAcwBC,gBAAOC,YAAP,CAAoBC,OAAO,CAACC,GAAR,CAAYC,cAAhC,CAdxB;AAeaC,UAAAA,KAfb,GAeqB;AACVC,YAAAA,SAAS,EAAE,SADD;AAEVC,YAAAA,QAAQ,EAAE,SAFA;AAGVC,YAAAA,QAAQ,EAAE,aAHA;AAIVC,YAAAA,KAAK,EAAE,wBAJG;AAKVV,YAAAA,QAAQ,EAARA,QALU;AAMVW,YAAAA,WAAW,EAAE;AANH,WAfrB;AAwBaC,UAAAA,gBAxBb;AA0BaC,UAAAA,MA1Bb,GA0BsB,CAACP,KAAK,CAACC,SAAP,EAAkBD,KAAK,CAACE,QAAxB,EAAkCF,KAAK,CAACG,QAAxC,EACXH,KAAK,CAACI,KADK,EACEJ,KAAK,CAACN,QADR,EACkBM,KAAK,CAACK,WADxB,CA1BtB;AAAA;AAAA,iBA6Bab,eAAKC,KAAL,CAAWa,gBAAX,EAA6BC,MAA7B,CA7Bb;;AAAA;AA8BO;AACMC,UAAAA,SA/Bb;AAiCaC,UAAAA,UAjCb,GAiC0B,CAACT,KAAK,CAACI,KAAP,CAjC1B;AAAA;AAAA,iBAkCaZ,eAAKC,KAAL,CAAWe,SAAX,EAAsBC,UAAtB,CAlCb;;AAAA;AAqCOnB,UAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ;AArCP;AAAA,iBAsCaC,eAAKC,KAAL,qQAtCb;;AAAA;AA8COH,UAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ;AA9CP;AAAA,iBA+CaC,eAAKC,KAAL,mdA/Cb;;AAAA;AA2DOH,UAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AA3DP;AAAA,iBA4DaC,eAAKC,KAAL,8VA5Db;;AAAA;AAqEOH,UAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ;AArEP;AAAA,iBAsEaC,eAAKC,KAAL,iXAtEb;;AAAA;AA+EOH,UAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AA/EP;AAAA,iBAgFaC,eAAKC,KAAL,mUAhFb;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAwFOH,UAAAA,OAAO,CAACC,GAAR;;AAxFP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAD","sourcesContent":["/* eslint-disable indent */\n/* eslint-disable eol-last */\nimport dotenv from 'dotenv';\nimport pool from './index';\nimport bcrypt from '../utilities/bcrypt';\n\ndotenv.config();\n\nconsole.log('Creating tables...');\n\n(async () => {\n    try {\n        console.log('Creating users table...');\n        await pool.query(`CREATE TABLE IF NOT EXISTS users(\n        id SERIAL PRIMARY KEY,\n        first_name VARCHAR(50) NOT NULL,\n        last_name VARCHAR(50) NOT NULL,\n        user_name VARCHAR(50) UNIQUE NOT NULL,\n        email VARCHAR(100) UNIQUE NOT NULL,\n        phone_number VARCHAR(11) NOT NULL,\n        password VARCHAR(100) NOT NULL,\n        admin BOOLEAN DEFAULT FALSE,\n        created_on TIMESTAMPTZ DEFAULT NOW())`);\n\n        const password = bcrypt.hashPassword(process.env.ADMIN_PASSWORD);\n        const Admin = {\n            firstname: 'legolas',\n            lastname: 'Aragorn',\n            username: 'ShirePrince',\n            email: 'legolaslegit@gmail.com',\n            password,\n            phonenumber: '08135266484',\n        };\n\n        const queryPlaceholder = `INSERT INTO users (first_name, last_name, user_name, email, password,  phone_number)\n       VALUES ($1, $2, $3, $4, $5, $6) RETURNING id, first_name, last_name, user_name, email, phone_number`;\n        const values = [Admin.firstname, Admin.lastname, Admin.username,\n            Admin.email, Admin.password, Admin.phonenumber,\n        ];\n        await pool.query(queryPlaceholder, values);\n        // eslint-disable-next-line quotes\n        const makeAdmin = `UPDATE users SET admin = true WHERE email = $1`;\n\n        const adminValue = [Admin.email];\n        await pool.query(makeAdmin, adminValue);\n\n\n        console.log('Creating meetups table...');\n        await pool.query(`CREATE TABLE IF NOT EXISTS meetups(\n        id SERIAL PRIMARY KEY,\n        topic VARCHAR(255) NOT NULL,\n        location TEXT NOT NULL,\n        happening_on VARCHAR(50) NOT NULL,\n        image VARCHAR(50),\n        created_on TIMESTAMPTZ DEFAULT NOW())`);\n\n        console.log('Creating questions table...');\n        await pool.query(`CREATE TABLE IF NOT EXISTS questions(\n        id SERIAL PRIMARY KEY,\n        meetup_id INT NOT NULL,\n        title VARCHAR(255) NOT NULL,\n        body TEXT NOT NULL,\n        up_votes INT DEFAULT 0,\n        down_votes INT DEFAULT 0,\n        user_id INT NOT NULL,\n        created_on TIMESTAMPTZ DEFAULT NOW(),\n        FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE CASCADE,\n        FOREIGN KEY (meetup_id) REFERENCES meetups (id) ON DELETE CASCADE)`);\n\n        console.log('Creating rsvps table...');\n        await pool.query(`CREATE TABLE IF NOT EXISTS rsvps(\n        id SERIAL,\n        meetup_id INT NOT NULL,\n        user_id INT NOT NULL,\n        response VARCHAR(5) NOT NULL,\n        PRIMARY KEY(meetup_id, user_id),\n        FOREIGN KEY (meetup_id) REFERENCES meetups (id) ON DELETE CASCADE,\n        FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE CASCADE)`);\n\n        console.log('Creating comments table...');\n        await pool.query(`CREATE TABLE IF NOT EXISTS comments(\n        id SERIAL PRIMARY KEY,\n        question_id INT NOT NULL,\n        comment TEXT NOT NULL,\n        user_id INT NOT NULL,\n        created_on TIMESTAMPTZ DEFAULT NOW(),\n        FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE CASCADE,\n        FOREIGN KEY (question_id) REFERENCES questions (id) ON DELETE CASCADE)`);\n\n        console.log('Creating votes table...');\n        await pool.query(`CREATE TABLE IF NOT EXISTS votes(\n        id SERIAL PRIMARY KEY,\n        user_id INT NOT NULL,\n        question_id INT NOT NULL,\n        vote VARCHAR(12) NOT NULL,\n        FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE CASCADE,\n        FOREIGN KEY (question_id) REFERENCES questions (id) ON DELETE CASCADE)`);\n    } catch (error) {\n        console.log(error);\n    }\n})();"],"file":"migrationsCreateTables.js"}