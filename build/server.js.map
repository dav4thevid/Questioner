{"version":3,"sources":["../server/server.js"],"names":["dotenv","config","server","router","express","Router","port","process","env","PORT","use","bodyParser","json","urlencoded","extended","get","req","res","status","send","message","app","http","createServer","listen","console","log"],"mappings":";;;;;;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;AANA;AAQAA,gBAAOC,MAAP,G,CACA;;;AACA,IAAMC,MAAM,GAAG,uBAAf;;AACA,IAAMC,MAAM,GAAGC,iBAAQC,MAAR,EAAf,C,CAEA;;;AACA,IAAMC,IAAI,GAAGC,OAAO,CAACC,GAAR,CAAYC,IAAZ,IAAoB,IAAjC;AAEA,qBAAON,MAAP,E,CAEA;;AACAD,MAAM,CAACQ,GAAP,CAAW,qBAAO,KAAP,CAAX,E,CAEA;;AACAR,MAAM,CAACQ,GAAP,CAAWC,oBAAWC,IAAX,EAAX;AACAV,MAAM,CAACQ,GAAP,CAAWC,oBAAWE,UAAX,CAAsB;AAC/BC,EAAAA,QAAQ,EAAE;AADqB,CAAtB,CAAX,E,CAIA;;AACAZ,MAAM,CAACQ,GAAP,CAAW,SAAX,EAAsBP,MAAtB,E,CAEA;;AACAD,MAAM,CAACa,GAAP,CAAW,GAAX,EAAgB,UAACC,GAAD,EAAMC,GAAN;AAAA,SAAcA,GAAG,CAACC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACjDC,IAAAA,OAAO,EAAE;AADwC,GAArB,CAAd;AAAA,CAAhB,E,CAIA;;AACA,IAAMC,GAAG,GAAGC,cAAKC,YAAL,CAAkBrB,MAAlB,CAAZ;;AAEAmB,GAAG,CAACG,MAAJ,CAAWlB,IAAX,EAAiB,YAAM;AACrBmB,EAAAA,OAAO,CAACC,GAAR,kCAAsCpB,IAAtC;AACD,CAFD;eAIeJ,M","sourcesContent":["/* eslint-disable no-undef */\nimport http from 'http';\nimport express from 'express';\nimport dotenv from 'dotenv';\nimport logger from 'morgan';\nimport bodyParser from 'body-parser';\nimport routes from './usingJsDataStructures/routes/routes';\n\ndotenv.config();\n// Set up express app\nconst server = express();\nconst router = express.Router();\n\n// Port configuration\nconst port = process.env.PORT || 8000;\n\nroutes(router);\n\n// Log requests to the console\nserver.use(logger('dev'));\n\n// Parse incoming request data\nserver.use(bodyParser.json());\nserver.use(bodyParser.urlencoded({\n  extended: false,\n}));\n\n// API Routes\nserver.use('/api/v1', router);\n\n// Set up all default catch-all route that sends a message in JSON format\nserver.get('*', (req, res) => res.status(404).send({\n  message: 'That route does not exist',\n}));\n\n// Create server\nconst app = http.createServer(server);\n\napp.listen(port, () => {\n  console.log(`Server running on port ${port}`);\n});\n\nexport default server;"],"file":"server.js"}