{"version":3,"sources":["../server/app.js"],"names":["app","use","bodyParser","json","urlencoded","extended","routes","all","req","res","status","message","next","error","Error","messages"],"mappings":";;;;;;;AAEA;;AACA;;AACA;;AACA;;AAIA;;;;AATA;;AACA;AAMA;AACA,IAAMA,GAAG,GAAG,uBAAZ;AAGA;AACAA,GAAG,CAACC,GAAJ,CAAQ,qBAAO,KAAP,CAAR,E,CAEA;;AACAD,GAAG,CAACC,GAAJ,CAAQC,oBAAWC,IAAX,EAAR;AACAH,GAAG,CAACC,GAAJ,CAAQC,oBAAWE,UAAX,CAAsB;AAC5BC,EAAAA,QAAQ,EAAE;AADkB,CAAtB,CAAR;AAIAL,GAAG,CAACC,GAAJ,CAAQ,SAAR,EAAmBK,eAAnB;AAEAN,GAAG,CAACO,GAAJ,CAAQ,SAAR,EAAmB,UAACC,GAAD,EAAMC,GAAN,EAAc;AAC/BA,EAAAA,GAAG,CAACC,MAAJ,CAAW,GAAX,EAAgBP,IAAhB,CAAqB;AACnBO,IAAAA,MAAM,EAAE,GADW;AAEnBC,IAAAA,OAAO,EAAE;AAFU,GAArB;AAID,CALD;AAOAX,GAAG,CAACO,GAAJ,CAAQ,IAAR,EAAc,UAACC,GAAD,EAAMC,GAAN;AAAA,SAAcA,GAAG,CAACC,MAAJ,CAAW,GAAX,EAAgBP,IAAhB,CAAqB;AAC/CO,IAAAA,MAAM,EAAE,GADuC;AAE/CC,IAAAA,OAAO,EAAE;AAFsC,GAArB,CAAd;AAAA,CAAd;AAKAX,GAAG,CAACC,GAAJ,CAAQ,UAACO,GAAD,EAAMC,GAAN,EAAWG,IAAX,EAAoB;AAC1B,MAAMC,KAAK,GAAG,IAAIC,KAAJ,CAAU,eAAV,CAAd;AACAD,EAAAA,KAAK,CAACH,MAAN,GAAe,GAAf;AACAE,EAAAA,IAAI,CAACC,KAAD,CAAJ;AACD,CAJD;AAMAb,GAAG,CAACC,GAAJ,CAAQ,UAACY,KAAD,EAAQL,GAAR,EAAaC,GAAb,EAAqB;AAC3BA,EAAAA,GAAG,CAACC,MAAJ,CAAWG,KAAK,CAACH,MAAN,IAAgB,GAA3B;AACAD,EAAAA,GAAG,CAACN,IAAJ,CAAS;AACPO,IAAAA,MAAM,EAAEG,KAAK,CAACH,MADP;AAEPG,IAAAA,KAAK,EAAEA,KAAK,CAACE;AAFN,GAAT;AAID,CAND;eASef,G","sourcesContent":["/* eslint-disable import/first */\n/* eslint-disable eol-last */\nimport express from 'express';\nimport '@babel/polyfill';\nimport logger from 'morgan';\nimport bodyParser from 'body-parser';\n\n// Set up express app\nconst app = express();\nimport routes from './routes';\n\n// Log requests to the console\napp.use(logger('dev'));\n\n// Parse incoming request data\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({\n  extended: false,\n}));\n\napp.use('/api/v1', routes);\n\napp.all('/api/v1', (req, res) => {\n  res.status(200).json({\n    status: 200,\n    message: 'Welcome to the Questioner API.',\n  });\n});\n\napp.all('/*', (req, res) => res.status(404).json({\n  status: 404,\n  message: 'Not Found',\n}));\n\napp.use((req, res, next) => {\n  const error = new Error('Invalid route');\n  error.status = 404;\n  next(error);\n});\n\napp.use((error, req, res) => {\n  res.status(error.status || 500);\n  res.json({\n    status: error.status,\n    error: error.messages,\n  });\n});\n\n\nexport default app;"],"file":"app.js"}