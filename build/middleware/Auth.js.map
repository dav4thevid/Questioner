{"version":3,"sources":["../../server/middleware/Auth.js"],"names":["dotenv","config","Auth","verifyToken","req","res","next","header","headers","authorization","token","split","jwt","verify","process","env","SECRET","decoded","user","status","send","adminAuth","admin"],"mappings":";;;;;;;AAEA;;AACA;;AACA;;;;;;;;AAIAA,gBAAOC,MAAP;;AAEA,IAAMC,IAAI,GAAG;AAELC,EAAAA,WAFK;AAAA;AAAA;AAAA,6CAEOC,GAFP,EAEYC,GAFZ,EAEiBC,IAFjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAGHC,cAAAA,MAHG,GAGMH,GAAG,CAACI,OAAJ,CAAYC,aAHlB;;AAAA,oBAIL,OAAOF,MAAP,KAAkB,WAJb;AAAA;AAAA;AAAA;;AAAA,+CAKA,mCAAcF,GAAd,EAAmB,GAAnB,EAAwB,4CAAxB,CALA;;AAAA;AAQHK,cAAAA,KARG,GAQKH,MAAM,CAACI,KAAP,CAAa,GAAb,EAAkB,CAAlB,CARL;;AAAA,kBASJD,KATI;AAAA;AAAA;AAAA;;AAAA,+CAUA,mCAAcL,GAAd,EAAmB,GAAnB,EAAwB,yDAAxB,CAVA;;AAAA;AAAA;AAAA;AAAA,qBAaeO,sBAAIC,MAAJ,CAAWH,KAAX,EAAkBI,OAAO,CAACC,GAAR,CAAYC,MAA9B,CAbf;;AAAA;AAaDC,cAAAA,OAbC;AAcPb,cAAAA,GAAG,CAACc,IAAJ,GAAWD,OAAX;AACAX,cAAAA,IAAI;AAfG;AAAA;;AAAA;AAAA;AAAA;AAAA,+CAiBAD,GAAG,CAACc,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,aAjBA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAqBLC,EAAAA,SArBK;AAAA;AAAA;AAAA,8CAqBKjB,GArBL,EAqBUC,GArBV,EAqBeC,IArBf;AAAA;AAAA;AAAA;AAAA;AAAA;AAuBPgB,cAAAA,KAvBO,GAwBLlB,GAAG,CAACc,IAxBC,CAuBPI,KAvBO;;AAAA,kBA0BJA,KA1BI;AAAA;AAAA;AAAA;;AAAA,gDA2BA,mCAAcjB,GAAd,EAAmB,GAAnB,EAAwB,4CAAxB,CA3BA;;AAAA;AA6BTC,cAAAA,IAAI;;AA7BK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,CAAb;eAiCeJ,I","sourcesContent":["/* eslint-disable consistent-return */\n/* eslint-disable eol-last */\nimport jwt from 'jsonwebtoken';\nimport dotenv from 'dotenv';\nimport {\n  errorResponse,\n} from '../utilities/responseformat';\n\ndotenv.config();\n\nconst Auth = {\n\n  async verifyToken(req, res, next) {\n    const header = req.headers.authorization;\n    if (typeof header === 'undefined') {\n      return errorResponse(res, 401, 'You are not authorized to make this action');\n    }\n\n    const token = header.split(' ')[1];\n    if (!token) {\n      return errorResponse(res, 401, 'You are not authorized to make this action please login');\n    }\n    try {\n      const decoded = await jwt.verify(token, process.env.SECRET);\n      req.user = decoded;\n      next();\n    } catch (error) {\n      return res.status(400).send(error);\n    }\n  },\n\n  async adminAuth(req, res, next) {\n    const {\n      admin,\n    } = req.user;\n\n    if (!admin) {\n      return errorResponse(res, 401, 'You are not authorized to make this action');\n    }\n    next();\n  },\n};\n\nexport default Auth;"],"file":"Auth.js"}