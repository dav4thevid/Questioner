{"version":3,"sources":["../../server/middleware/Auth.js"],"names":["Auth","verifyToken","req","res","next","header","headers","authorization","status","json","error","token","split","send","jwt","verify","process","env","SECRET","decoded","user","adminAuth","admin"],"mappings":";;;;;;;AAEA;;;;;;;;AAEA,IAAMA,IAAI,GAAG;AAELC,EAAAA,WAFK;AAAA;AAAA;AAAA,6CAEOC,GAFP,EAEYC,GAFZ,EAEiBC,IAFjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAGHC,cAAAA,MAHG,GAGMH,GAAG,CAACI,OAAJ,CAAYC,aAHlB;;AAAA,oBAIL,OAAOF,MAAP,KAAkB,WAJb;AAAA;AAAA;AAAA;;AAAA,+CAKAF,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BD,gBAAAA,MAAM,EAAE,GADkB;AAE1BE,gBAAAA,KAAK,EAAE;AAFmB,eAArB,CALA;;AAAA;AAWHC,cAAAA,KAXG,GAWKN,MAAM,CAACO,KAAP,CAAa,GAAb,EAAkB,CAAlB,CAXL;;AAAA,kBAYJD,KAZI;AAAA;AAAA;AAAA;;AAAA,+CAaAR,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBK,IAAhB,CAAqB;AAC1BL,gBAAAA,MAAM,EAAE,GADkB;AAE1BE,gBAAAA,KAAK,EAAE;AAFmB,eAArB,CAbA;;AAAA;AAAA;AAAA;AAAA,qBAmBeI,sBAAIC,MAAJ,CAAWJ,KAAX,EAAkBK,OAAO,CAACC,GAAR,CAAYC,MAA9B,CAnBf;;AAAA;AAmBDC,cAAAA,OAnBC;AAoBPjB,cAAAA,GAAG,CAACkB,IAAJ,GAAWD,OAAX;AACAf,cAAAA,IAAI;AArBG;AAAA;;AAAA;AAAA;AAAA;AAAA,+CAuBAD,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBK,IAAhB,aAvBA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AA2BLQ,EAAAA,SA3BK;AAAA;AAAA;AAAA,8CA2BKnB,GA3BL,EA2BUC,GA3BV,EA2BeC,IA3Bf;AAAA;AAAA;AAAA;AAAA;AAAA;AA6BPkB,cAAAA,KA7BO,GA8BLpB,GAAG,CAACkB,IA9BC,CA6BPE,KA7BO;;AAAA,kBAgCJA,KAhCI;AAAA;AAAA;AAAA;;AAAA,gDAiCAnB,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BD,gBAAAA,MAAM,EAAE,GADkB;AAE1BE,gBAAAA,KAAK,EAAE;AAFmB,eAArB,CAjCA;;AAAA;AAsCTN,cAAAA,IAAI;;AAtCK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,CAAb;eA0CeJ,I","sourcesContent":["/* eslint-disable consistent-return */\n/* eslint-disable eol-last */\nimport jwt from 'jsonwebtoken';\n\nconst Auth = {\n\n  async verifyToken(req, res, next) {\n    const header = req.headers.authorization;\n    if (typeof header === 'undefined') {\n      return res.status(401).json({\n        status: 401,\n        error: 'Unauthorized header',\n      });\n    }\n\n    const token = header.split(' ')[1];\n    if (!token) {\n      return res.status(403).send({\n        status: 403,\n        error: 'Token is not provided',\n      });\n    }\n    try {\n      const decoded = await jwt.verify(token, process.env.SECRET);\n      req.user = decoded;\n      next();\n    } catch (error) {\n      return res.status(400).send(error);\n    }\n  },\n\n  async adminAuth(req, res, next) {\n    const {\n      admin,\n    } = req.user;\n\n    if (!admin) {\n      return res.status(403).json({\n        status: 403,\n        error: 'Unauthorized request',\n      });\n    }\n    next();\n  },\n};\n\nexport default Auth;"],"file":"Auth.js"}