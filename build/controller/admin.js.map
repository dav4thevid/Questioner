{"version":3,"sources":["../../server/controller/admin.js"],"names":["AdminController","createnewAdmin","req","res","body","password","confirmPassword","status","json","error","newAdmin","AdminModel","findAdminByEmail","email","isExistingAdminMail","findAdminByUsername","username","isExistingAdminName","bcrypt","hashPassword","newAdminSignUp","createdUser","message","data","loginAdmin","comparePassword","tokenData","id","admin","jwt","generateToken","token","send"],"mappings":"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","sourcesContent":["/* eslint-disable eol-last */\nimport jwt from '../utilities/jwt';\nimport bcrypt from '../utilities/bcrypt';\nimport AdminModel from '../models/admin';\n\n\nconst AdminController = {\n  async createnewAdmin(req, res) {\n    if (req.body.password !== req.body.confirmPassword) {\n      return res.status(400).json({\n        status: 400,\n        error: 'Passwords do not match',\n      });\n    }\n\n    const newAdmin = new AdminModel(req.body);\n    const isExistingAdminMail = await AdminModel.findAdminByEmail(newAdmin.email);\n    if (isExistingAdminMail) {\n      return res.status(409).json({\n        status: 409,\n        error: 'This email address is already taken',\n      });\n    }\n\n    const isExistingAdminName = await AdminModel.findAdminByUsername(newAdmin.username);\n    if (isExistingAdminName) {\n      return res.status(409).json({\n        status: 409,\n        error: 'This username is already taken',\n      });\n    }\n    newAdmin.password = bcrypt.hashPassword(newAdmin.password);\n\n    const createdUser = await newAdmin.newAdminSignUp();\n\n    return res.status(201).json({\n      status: 201,\n      message: 'Admin created',\n      data: createdUser,\n    });\n  },\n\n  async loginAdmin(req, res) {\n    const {\n      email,\n      password,\n    } = req.body;\n\n    const isExistingAdminMail = await AdminModel.findAdminByEmail(email);\n    if (!isExistingAdminMail) {\n      return res.status(404).json({\n        status: 404,\n        error: 'The credentials you provided is incorrect',\n      });\n    }\n\n    if (!bcrypt.comparePassword(isExistingAdminMail.password, password)) {\n      return res.status(404).json({\n        status: 404,\n        error: 'The credentials you provided is incorrect',\n      });\n    }\n\n    const tokenData = {\n      id: isExistingAdminMail.id,\n      username: isExistingAdminMail.username,\n      admin: isExistingAdminMail.admin,\n    };\n\n    const token = await jwt.generateToken(tokenData);\n    return res.status(200).send({\n      status: 200,\n      message: 'You are logged in as an admin',\n      token,\n    });\n  },\n};\n\nexport default AdminController;"],"file":"admin.js"}