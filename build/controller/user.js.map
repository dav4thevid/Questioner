{"version":3,"sources":["../../server/controller/user.js"],"names":["UserController","createNewUser","req","res","body","password","confirmPassword","status","json","error","newUser","UserModel","findUserByEmail","email","isExistingUserMail","findUserByUsername","username","isExistingUsername","bcrypt","hashPassword","newUserSignUp","createdUser","message","data","loginUser","comparePassword","tokenData","id","admin","jwt","generateToken","token","send"],"mappings":"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","sourcesContent":["/* eslint-disable eol-last */\nimport jwt from '../utilities/jwt';\nimport bcrypt from '../utilities/bcrypt';\nimport UserModel from '../models/user';\n\n\nconst UserController = {\n  async createNewUser(req, res) {\n    if (req.body.password !== req.body.confirmPassword) {\n      return res.status(400).json({\n        status: 400,\n        error: 'Passwords do not match',\n      });\n    }\n\n    const newUser = new UserModel(req.body);\n    const isExistingUserMail = await UserModel.findUserByEmail(newUser.email);\n    if (isExistingUserMail) {\n      return res.status(409).json({\n        status: 409,\n        error: 'This email address is already taken',\n      });\n    }\n\n    const isExistingUsername = await UserModel.findUserByUsername(newUser.username);\n    if (isExistingUsername) {\n      return res.status(409).json({\n        status: 409,\n        error: 'This username is already taken',\n      });\n    }\n    newUser.password = bcrypt.hashPassword(newUser.password);\n\n    const createdUser = await newUser.newUserSignUp();\n\n    return res.status(201).json({\n      status: 201,\n      message: 'User created',\n      data: createdUser,\n    });\n  },\n\n  async loginUser(req, res) {\n    const {\n      email,\n      password,\n    } = req.body;\n\n    const isExistingUserMail = await UserModel.findUserByEmail(email);\n    if (!isExistingUserMail) {\n      return res.status(404).json({\n        status: 404,\n        error: 'The credentials you provided is incorrect',\n      });\n    }\n\n    if (!bcrypt.comparePassword(isExistingUserMail.password, password)) {\n      return res.status(404).json({\n        status: 404,\n        error: 'The credentials you provided is incorrect',\n      });\n    }\n\n    const tokenData = {\n      id: isExistingUserMail.id,\n      username: isExistingUserMail.username,\n      admin: isExistingUserMail.admin,\n    };\n\n    const token = await jwt.generateToken(tokenData);\n    return res.status(200).send({\n      status: 200,\n      message: 'You are logged in',\n      token,\n    });\n  },\n};\n\nexport default UserController;"],"file":"user.js"}