{"version":3,"sources":["../../server/controller/user.js"],"names":["UserController","createNewUser","req","res","body","password","confirmPassword","newUser","UserModel","findUserByEmail","email","isExistingUserMail","findUserByUsername","username","isExistingUsername","bcrypt","hashPassword","newUserSignUp","createdUser","loginUser","admin","comparePassword","tokenData","id","jwt","generateToken","token","logIn","loginData"],"mappings":"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","sourcesContent":["/* eslint-disable eol-last */\nimport jwt from '../utilities/jwt';\nimport bcrypt from '../utilities/bcrypt';\nimport UserModel from '../models/user';\nimport {\n  successResponse,\n  errorResponse,\n  successfullLogin,\n} from '../utilities/responseformat';\n\n\nconst UserController = {\n  async createNewUser(req, res) {\n    if (req.body.password !== req.body.confirmPassword) {\n      return errorResponse(res, 400, 'Passwords do not match');\n    }\n\n    const newUser = new UserModel(req.body);\n    const isExistingUserMail = await UserModel.findUserByEmail(newUser.email);\n    if (isExistingUserMail) {\n      return errorResponse(res, 409, 'This email address is not available');\n    }\n\n    const isExistingUsername = await UserModel.findUserByUsername(newUser.username);\n    if (isExistingUsername) {\n      return errorResponse(res, 409, 'This username is not available');\n    }\n    newUser.password = bcrypt.hashPassword(newUser.password);\n\n    const createdUser = await newUser.newUserSignUp();\n\n    return successResponse(res, 201, 'You have created an account', createdUser);\n  },\n\n  async loginUser(req, res) {\n    const {\n      email,\n      password,\n    } = req.body;\n\n    const isExistingUserMail = await UserModel.findUserByEmail(email);\n    const {\n      admin,\n    } = isExistingUserMail;\n    if (!isExistingUserMail) {\n      return errorResponse(res, 404, 'The credentials you provided is incorrect');\n    }\n\n    if (!bcrypt.comparePassword(isExistingUserMail.password, password)) {\n      return errorResponse(res, 401, 'The credentials you provided is incorrect');\n    }\n\n    const tokenData = {\n      id: isExistingUserMail.id,\n      username: isExistingUserMail.username,\n      admin: isExistingUserMail.admin,\n    };\n\n    const token = await jwt.generateToken(tokenData);\n    const loginData = await UserModel.logIn(email);\n    return successfullLogin(res, 200, admin ? 'You are logged in as an admin' : 'You are logged in as a normal user', token, loginData);\n  },\n};\n\nexport default UserController;"],"file":"user.js"}