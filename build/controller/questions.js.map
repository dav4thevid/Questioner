{"version":3,"sources":["../../server/controller/questions.js"],"names":["createQuestion","req","res","id","user","body","userId","question","Question","Meetup","retrieveSingleMeetup","meetupId","meetupExists","post","newQuestion","upvote","questionId","params","getById","questionExists","user_id","vote","ifVoted","voted","updateVoteStatus","balaceDownvote","result","balanceUpvoteRecord","deleteVoteRecord","createVoteRecord","downvote","balanceDownvoteRecord"],"mappings":"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","sourcesContent":["/* eslint-disable prefer-const */\n/* eslint-disable eol-last */\nimport Question from '../models/question';\nimport Meetup from '../models/meetup';\nimport {\n  errorResponse,\n  successResponse,\n} from '../utilities/responseformat';\n\nexport default {\n  async createQuestion(req, res) {\n    const {\n      id,\n    } = req.user;\n    req.body.userId = id;\n\n    const question = new Question(req.body);\n\n    const meetupExists = await Meetup.retrieveSingleMeetup(question.meetupId);\n    if (!meetupExists) {\n      return errorResponse(res, 404, 'Meetup not found');\n    }\n\n    const newQuestion = await question.post();\n    return successResponse(res, 201, 'Question created', newQuestion);\n  },\n\n  async upvote(req, res) {\n    const questionId = req.params.id;\n    const userId = req.user.id;\n\n    const questionExists = await Question.getById(questionId);\n    if (!questionExists) return errorResponse(res, 404, 'Question not found.');\n\n    if (questionExists.user_id === userId) {\n      return errorResponse(res, 400, 'You can not vote on your own question.');\n    }\n\n    const vote = 'upvoted';\n    let voted = await Question.ifVoted(userId, questionId);\n\n    if (voted && voted.vote === 'downvoted') {\n      await Question.updateVoteStatus(questionId);\n      await Question.balaceDownvote(questionId);\n      const result = await Question.upvote(questionId);\n      return successResponse(res, 200, `Question ${vote}.`, result);\n    }\n\n    if (voted && voted.vote === 'upvoted') {\n      await Question.balanceUpvoteRecord(questionId);\n      await Question.deleteVoteRecord(userId, questionId);\n      return successResponse(res, 200, 'Question unvoted', null);\n    }\n\n\n    const result = await Question.upvote(questionId);\n    await Question.createVoteRecord(userId, questionId, vote);\n    return successResponse(res, 200, `Question ${vote}.`, result);\n  },\n\n  async downvote(req, res) {\n    const questionId = req.params.id;\n    const userId = req.user.id;\n\n\n    const questionExists = await Question.getById(questionId);\n    if (!questionExists) return errorResponse(res, 404, 'Question not found.');\n\n    if (questionExists.user_id === userId) {\n      return errorResponse(res, 400, 'You can not vote on your own question.');\n    }\n\n    const vote = 'downvoted';\n    const voted = await Question.ifVoted(userId, questionId);\n\n    if (voted && voted.vote === 'upvoted') {\n      await Question.updateVoteStatus(questionId);\n      await Question.balanceUpvoteRecord(questionId);\n      const result = await Question.downvote(questionId);\n      return successResponse(res, 200, `Question ${vote}.`, result);\n    }\n\n    if (voted && voted.vote === 'downvoted') {\n      await Question.balanceDownvoteRecord(questionId);\n      await Question.deleteVoteRecord(userId, questionId);\n      return successResponse(res, 200, 'Question unvoted', null);\n    }\n\n    const result = await Question.downvote(questionId);\n    await Question.createVoteRecord(userId, questionId, vote);\n    return successResponse(res, 200, `Question ${vote}.`, result);\n  },\n};"],"file":"questions.js"}