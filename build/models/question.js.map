{"version":3,"sources":["../../server/models/question.js"],"names":["Question","question","meetupId","title","body","userId","queryString","values","pool","query","rows","id","queryPlaceholder","queryValues","questionId","vote","result"],"mappings":"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","sourcesContent":["/* eslint-disable eol-last */\nimport pool from '../db/index';\n\nclass Question {\n  constructor(question) {\n    this.meetupId = question.meetupId;\n    this.title = question.title;\n    this.body = question.body;\n    this.userId = question.userId;\n  }\n\n  async post() {\n    const queryString = `INSERT INTO questions (meetup_id, title, body, user_id)\n    VALUES ($1, $2, $3, $4) RETURNING *`;\n    const values = [this.meetupId, this.title, this.body, this.userId];\n    const {\n      rows,\n    } = await pool.query(queryString, values);\n    return rows[0];\n  }\n\n  static async getById(id) {\n    const queryPlaceholder = 'SELECT * FROM questions WHERE id = $1';\n    const queryValues = [id];\n    const {\n      rows,\n    } = await pool.query(queryPlaceholder, queryValues);\n    return rows[0];\n  }\n\n  static async upvote(id) {\n    const queryPlaceholder = 'UPDATE questions SET up_votes = up_votes + 1 WHERE id = $1 RETURNING *';\n    const queryValues = [id];\n    const {\n      rows,\n    } = await pool.query(queryPlaceholder, queryValues);\n    return rows[0];\n  }\n\n  static async downvote(id) {\n    const queryPlaceholder = 'UPDATE questions SET down_votes = down_votes + 1 WHERE id = $1 RETURNING *';\n    const queryValues = [id];\n    const {\n      rows,\n    } = await pool.query(queryPlaceholder, queryValues);\n    return rows[0];\n  }\n\n  static async createVoteRecord(userId, questionId, vote) {\n    const queryPlaceholder = `INSERT INTO votes (user_id, question_id, vote) VALUES\n    ($1, $2, $3)`;\n    const queryValues = [userId, questionId, vote];\n    const result = await pool.query(queryPlaceholder, queryValues);\n    return result;\n  }\n\n  static async balanceUpvoteRecord(id) {\n    const queryPlaceholder = 'UPDATE questions SET up_votes = up_votes - 1 WHERE id = $1 RETURNING *';\n    const queryValues = [id];\n    const result = await pool.query(queryPlaceholder, queryValues);\n    return result;\n  }\n\n  static async balanceDownvoteRecord(id) {\n    const queryPlaceholder = 'UPDATE questions SET down_votes = down_votes - 1 WHERE id = $1 RETURNING *';\n    const queryValues = [id];\n    const result = await pool.query(queryPlaceholder, queryValues);\n    return result;\n  }\n\n  static async ifVoted(userId, questionId) {\n    const queryPlaceholder = 'SELECT * FROM votes WHERE user_id = $1 AND question_id = $2';\n    const queryValues = [userId, questionId];\n    const {\n      rows,\n    } = await pool.query(queryPlaceholder, queryValues);\n    return rows[0];\n  }\n\n  static async userVoteStatus(userId, questionId) {\n    const queryPlaceholder = 'SELECT vote FROM votes WHERE user_id = $1 AND question_id = $2';\n    const queryValues = [userId, questionId];\n    const {\n      rows,\n    } = await pool.query(queryPlaceholder, queryValues);\n    return rows[0];\n  }\n\n  static async updateVoteStatus(userId, questionId, vote) {\n    const queryPlaceholder = `UPDATE votes SET vote='${vote}' WHERE user_id = $1 AND question_id = $2`;\n    const queryValues = [userId, questionId];\n    const {\n      rows,\n    } = await pool.query(queryPlaceholder, queryValues);\n    return rows[0];\n  }\n\n  static async deleteVoteRecord(userId, questionId) {\n    const queryPlaceholder = 'DELETE FROM votes where user_id = $1 AND question_id = $2';\n    const queryValues = [userId, questionId];\n    const result = await pool.query(queryPlaceholder, queryValues);\n    return result;\n  }\n}\n\nexport default Question;"],"file":"question.js"}