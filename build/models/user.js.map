{"version":3,"sources":["../../server/models/user.js"],"names":["UserModel","user","firstname","lastname","username","email","password","phonenumber","queryPlaceholder","values","pool","query","rows"],"mappings":";;;;;;;AACA;;;;;;;;;;;;;;IAEMA,S;;;AACJ,qBAAYC,IAAZ,EAAkB;AAAA;;AAChB,SAAKC,SAAL,GAAiBD,IAAI,CAACC,SAAtB;AACA,SAAKC,QAAL,GAAgBF,IAAI,CAACE,QAArB;AACA,SAAKC,QAAL,GAAgBH,IAAI,CAACG,QAArB;AACA,SAAKC,KAAL,GAAaJ,IAAI,CAACI,KAAlB;AACA,SAAKC,QAAL,GAAgBL,IAAI,CAACK,QAArB;AACA,SAAKC,WAAL,GAAmBN,IAAI,CAACM,WAAxB;AACD;;;;;;;;;;;;;;AAGOC,gBAAAA,gB;AAGAC,gBAAAA,M,GAAS,CAAC,KAAKP,SAAN,EAAiB,KAAKC,QAAtB,EAAgC,KAAKC,QAArC,EACb,KAAKC,KADQ,EACD,KAAKC,QADJ,EACc,KAAKC,WADnB,C;;uBAKLG,eAAKC,KAAL,CAAWH,gBAAX,EAA6BC,MAA7B,C;;;;AADRG,gBAAAA,I,QAAAA,I;iDAEKA,IAAI,CAAC,CAAD,C;;;;;;;;;;;;;;;;;;;;;gDAGgBP,K;;;;;;;AACrBG,gBAAAA,gB,GAAmB,sC;AACnBC,gBAAAA,M,GAAS,CAACJ,KAAD,C;;uBAGLK,eAAKC,KAAL,CAAWH,gBAAX,EAA6BC,MAA7B,C;;;;AADRG,gBAAAA,I,SAAAA,I;kDAEKA,IAAI,CAAC,CAAD,C;;;;;;;;;;;;;;;;;;;;;gDAGmBR,Q;;;;;;;AACxBI,gBAAAA,gB,GAAmB,yC;AACnBC,gBAAAA,M,GAAS,CAACL,QAAD,C;;uBAGLM,eAAKC,KAAL,CAAWH,gBAAX,EAA6BC,MAA7B,C;;;;AADRG,gBAAAA,I,SAAAA,I;kDAEKA,IAAI,CAAC,CAAD,C;;;;;;;;;;;;;;;;;;;;;gDAGMP,K;;;;;;;AACXG,gBAAAA,gB,GAAmB,iD;AACnBC,gBAAAA,M,GAAS,CAACJ,KAAD,C;;uBAGLK,eAAKC,KAAL,CAAWH,gBAAX,EAA6BC,MAA7B,C;;;;AADRG,gBAAAA,I,SAAAA,I;kDAEKA,IAAI,CAAC,CAAD,C;;;;;;;;;;;;;;;;;;;;;eAIAZ,S","sourcesContent":["/* eslint-disable eol-last */\nimport pool from '../db/index';\n\nclass UserModel {\n  constructor(user) {\n    this.firstname = user.firstname;\n    this.lastname = user.lastname;\n    this.username = user.username;\n    this.email = user.email;\n    this.password = user.password;\n    this.phonenumber = user.phonenumber;\n  }\n\n  async newUserSignUp() {\n    const queryPlaceholder = `INSERT INTO users (firstname, lastname,\n      username, email, password,  phonenumber)\n      VALUES ($1, $2, $3, $4, $5, $6) RETURNING id, firstname, lastname, username, email, phonenumber`;\n    const values = [this.firstname, this.lastname, this.username,\n      this.email, this.password, this.phonenumber,\n    ];\n    const {\n      rows,\n    } = await pool.query(queryPlaceholder, values);\n    return rows[0];\n  }\n\n  static async findUserByEmail(email) {\n    const queryPlaceholder = 'SELECT * FROM users WHERE email = $1';\n    const values = [email];\n    const {\n      rows,\n    } = await pool.query(queryPlaceholder, values);\n    return rows[0];\n  }\n\n  static async findUserByUsername(username) {\n    const queryPlaceholder = 'SELECT * FROM users WHERE username = $1';\n    const values = [username];\n    const {\n      rows,\n    } = await pool.query(queryPlaceholder, values);\n    return rows[0];\n  }\n\n  static async logIn(email) {\n    const queryPlaceholder = 'SELECT id, password FROM users WHERE email = $1';\n    const values = [email];\n    const {\n      rows,\n    } = await pool.query(queryPlaceholder, values);\n    return rows[0];\n  }\n}\n\nexport default UserModel;"],"file":"user.js"}