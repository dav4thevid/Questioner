{"version":3,"sources":["../../server/test/users.spec.js"],"names":["userToken","describe","it","done","server","post","send","createUser","set","expect","end","err","res","userid","body","data","id","userFirstname","first_name","arrayProp","status","to","equal","should","be","an","userLogin","have","property","token","invalidUser","error","askQuestion","Authorization","postComment"],"mappings":"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","sourcesContent":["/* eslint-disable eol-last */\n/* eslint-disable no-undef */\nimport request from 'supertest';\nimport {\n  should,\n  expect,\n  chai,\n  assert,\n} from 'chai';\n\nimport server from '../app';\n\nimport {\n  createUser,\n  userLogin,\n  invalidUser,\n  askQuestion,\n  postComment,\n} from './testData';\n\nshould();\n\nlet userToken;\n\ndescribe('Create a user', async () => {\n  it('A prospective user should be able to create an account', (done) => {\n    request(server)\n      .post('/api/v1/auth/signup')\n      .send(createUser)\n      .set('Accept', 'application/json')\n      .expect('Content-Type', /json/)\n      .expect(201)\n      .end((err, res) => {\n        if (err) return done(err);\n        const userid = res.body.data.id;\n        const userFirstname = res.body.data.first_name;\n        const arrayProp = res.body.data;\n        expect(res.body.status).to.equal(201);\n        expect(userid).to.equal(2);\n        expect(userFirstname).to.equal('legolas');\n        (arrayProp).should.be.an('object');\n        return done();\n      });\n  });\n});\n\n\ndescribe('Login an existing User', async () => {\n  it('A user should be able to login', (done) => {\n    request(server)\n      .post('/api/v1/auth/login')\n      .send(userLogin)\n      .set('Accept', 'application/json')\n      .expect('Content-Type', /json/)\n      .expect(200)\n      .end((err, res) => {\n        if (err) return done(err);\n        expect(res.body.status).to.equal(200);\n        expect(res.body).to.be.an('object');\n        expect(res.body).to.have.property('token');\n        userToken = res.body.token;\n        return done();\n      });\n  });\n\n  it('Should throw an error if login is invalid', (done) => {\n    request(server)\n      .post('/api/v1/auth/login')\n      .send(invalidUser)\n      .set('Accept', 'application/json')\n      .expect('Content-Type', /json/)\n      .expect(401)\n      .end((err, res) => {\n        if (err) return done(err);\n        expect(res.body.status).to.equal(401);\n        expect(res.body).to.have.property('error');\n        expect(res.body.error).to.equal('The credentials you provided is incorrect');\n        return done();\n      });\n  });\n});\n\n\ndescribe('Create ask questions', async () => {\n  it('A user should be able to ask a question', (done) => {\n    request(server)\n      .post('/api/v1/questions')\n      .send(askQuestion)\n      .set('Accept', 'application/json')\n      .set({\n        Authorization: `Bearer ${userToken}`,\n      })\n      .expect('Content-Type', /json/)\n      .expect(201)\n      .end((err, res) => {\n        if (err) return done(err);\n        expect(res.body.status).to.equal(201);\n        return done();\n      });\n  });\n});\n\ndescribe('Create post comments', async () => {\n  it('A user should be able to comment on a question', (done) => {\n    request(server)\n      .post('/api/v1/comments')\n      .send(postComment)\n      .set('Accept', 'application/json')\n      .set({\n        Authorization: `Bearer ${userToken}`,\n      })\n      .expect('Content-Type', /json/)\n      .expect(201)\n      .end((err, res) => {\n        if (err) return done(err);\n        expect(res.body.status).to.equal(201);\n        return done();\n      });\n  });\n});"],"file":"users.spec.js"}