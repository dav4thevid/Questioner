{"version":3,"sources":["../../server/test/meetups.spec.js"],"names":["adminToken","describe","it","done","server","post","send","loginAdmin","set","expect","end","err","res","body","token","createMeetup","Authorization","status","to","equal","get"],"mappings":";;AAEA;;AACA;;AAOA;;AAEA;;;;;;;;AAKA,IAAIA,UAAJ;AAEAC,QAAQ,CAAC,gBAAD;AAAA;AAAA;AAAA;AAAA,wBAAmB;AAAA;AAAA;AAAA;AAAA;AACzBC,UAAAA,EAAE,CAAC,+BAAD,EAAkC,UAACC,IAAD,EAAU;AAC5C,oCAAQC,YAAR,EACGC,IADH,CACQ,oBADR,EAEGC,IAFH,CAEQC,oBAFR,EAGGC,GAHH,CAGO,QAHP,EAGiB,kBAHjB,EAIGC,MAJH,CAIU,cAJV,EAI0B,MAJ1B,EAKGC,GALH,CAKO,UAACC,GAAD,EAAMC,GAAN,EAAc;AACjB,kBAAID,GAAJ,EAAS,OAAOR,IAAI,CAACQ,GAAD,CAAX;AACTX,cAAAA,UAAU,GAAGY,GAAG,CAACC,IAAJ,CAASC,KAAtB;AACA,qBAAOX,IAAI,EAAX;AACD,aATH;AAUD,WAXC,CAAF;;AADyB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAnB,GAAR;AAgBAF,QAAQ,CAAC,gBAAD;AAAA;AAAA;AAAA;AAAA,wBAAmB;AAAA;AAAA;AAAA;AAAA;AACzBC,UAAAA,EAAE,CAAC,yCAAD,EAA4C,UAACC,IAAD,EAAU;AACtD,oCAAQC,YAAR,EACGC,IADH,CACQ,iBADR,EAEGC,IAFH,CAEQS,sBAFR,EAGGP,GAHH,CAGO,QAHP,EAGiB,kBAHjB,EAIGA,GAJH,CAIO;AACHQ,cAAAA,aAAa,mBAAYhB,UAAZ;AADV,aAJP,EAOGS,MAPH,CAOU,cAPV,EAO0B,MAP1B,EAQGA,MARH,CAQU,GARV,EASGC,GATH,CASO,UAACC,GAAD,EAAMC,GAAN,EAAc;AACjB,kBAAID,GAAJ,EAAS,OAAOR,IAAI,CAACQ,GAAD,CAAX;AACT,gCAAOC,GAAG,CAACC,IAAJ,CAASI,MAAhB,EAAwBC,EAAxB,CAA2BC,KAA3B,CAAiC,GAAjC;AACA,qBAAOhB,IAAI,EAAX;AACD,aAbH;AAcD,WAfC,CAAF;;AADyB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAnB,GAAR;AAmBAF,QAAQ,CAAC,gBAAD;AAAA;AAAA;AAAA;AAAA,wBAAmB;AAAA;AAAA;AAAA;AAAA;AACzBC,UAAAA,EAAE,CAAC,gDAAD,EAAmD,UAACC,IAAD,EAAU;AAC7D,oCAAQC,YAAR,EACGgB,GADH,CACO,oBADP,EAEGZ,GAFH,CAEO,QAFP,EAEiB,kBAFjB,EAGGA,GAHH,CAGO;AACHQ,cAAAA,aAAa,mBAAYhB,UAAZ;AADV,aAHP,EAMGS,MANH,CAMU,cANV,EAM0B,MAN1B,EAOGA,MAPH,CAOU,GAPV,EAQGC,GARH,CAQO,UAACC,GAAD,EAAMC,GAAN,EAAc;AACjB,kBAAID,GAAJ,EAAS,OAAOR,IAAI,CAACQ,GAAD,CAAX;AACT,gCAAOC,GAAG,CAACC,IAAJ,CAASI,MAAhB,EAAwBC,EAAxB,CAA2BC,KAA3B,CAAiC,GAAjC;AACA,qBAAOhB,IAAI,EAAX;AACD,aAZH;AAaD,WAdC,CAAF;;AADyB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAnB,GAAR","sourcesContent":["/* eslint-disable eol-last */\n/* eslint-disable no-undef */\nimport request from 'supertest';\nimport {\n  should,\n  expect,\n  chai,\n  assert,\n} from 'chai';\n\nimport server from '../app';\n\nimport {\n  loginAdmin,\n  createMeetup,\n} from './testData';\n\nlet adminToken;\n\ndescribe('Login an admin', async () => {\n  it('Admin should be able to login', (done) => {\n    request(server)\n      .post('/api/v1/auth/login')\n      .send(loginAdmin)\n      .set('Accept', 'application/json')\n      .expect('Content-Type', /json/)\n      .end((err, res) => {\n        if (err) return done(err);\n        adminToken = res.body.token;\n        return done();\n      });\n  });\n});\n\n\ndescribe('Create Meetups', async () => {\n  it('Admin should be able to create a meetup', (done) => {\n    request(server)\n      .post('/api/v1/meetups')\n      .send(createMeetup)\n      .set('Accept', 'application/json')\n      .set({\n        Authorization: `Bearer ${adminToken}`,\n      })\n      .expect('Content-Type', /json/)\n      .expect(201)\n      .end((err, res) => {\n        if (err) return done(err);\n        expect(res.body.status).to.equal(201);\n        return done();\n      });\n  });\n});\n\ndescribe('Create Meetups', async () => {\n  it('Should throw an error if meetup does not exist', (done) => {\n    request(server)\n      .get('/api/v1/meetups/15')\n      .set('Accept', 'application/json')\n      .set({\n        Authorization: `Bearer ${adminToken}`,\n      })\n      .expect('Content-Type', /json/)\n      .expect(404)\n      .end((err, res) => {\n        if (err) return done(err);\n        expect(res.body.status).to.equal(404);\n        return done();\n      });\n  });\n});"],"file":"meetups.spec.js"}